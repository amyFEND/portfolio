{"version":3,"sources":["App/sections/Home/Assets/AmyLogo.svg","App/sections/Home/Home.js","App/sections/About/About.js","App/sections/Projects/Projects.js","App/sections/Contact/Contact.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","id","className","src","logo","alt","class","Component","About","Projects","Contact","App","sections_Home_Home","sections_About_About","sections_Projects_Projects","sections_Contact_Contact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8UCsBzBC,mLAhBX,OACEC,EAAAC,EAAAC,cAAA,WAASC,GAAG,OAAOC,UAAU,IAC3BJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAMF,UAAU,OAAOG,IAAI,SACrCP,EAAAC,EAAAC,cAAA,4BAEAF,EAAAC,EAAAC,cAAA,QAAMM,MAAM,OAAZ,KACAR,EAAAC,EAAAC,cAAA,QAAMM,MAAM,OAAZ,KACAR,EAAAC,EAAAC,cAAA,QAAMM,MAAM,SAAZ,eAVSC,aCSJC,0LARX,OACEV,EAAAC,EAAAC,cAAA,WAASC,GAAG,QAAQC,UAAU,IAC1BJ,EAAAC,EAAAC,cAAA,2BAJUO,cCULE,0LARX,OACEX,EAAAC,EAAAC,cAAA,WAASC,GAAG,WAAWC,UAAU,IAC7BJ,EAAAC,EAAAC,cAAA,8BAJaO,cCURG,0LARX,OACEZ,EAAAC,EAAAC,cAAA,WAASC,GAAG,UAAUC,UAAU,IAC5BJ,EAAAC,EAAAC,cAAA,6BAJYO,cCkCPI,mLArBX,OACEb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAUbJ,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,cAhBUR,aCFES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2f32b4aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AmyLogo.161e3831.svg\";","import React, { Component } from 'react';\nimport './Home.scss';\nimport logo from './Assets/AmyLogo.svg';\n\nclass Home extends Component {\n  render() {\n    return(\n      <section id=\"Home\" className=\"\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"logo\" alt=\"logo\" />\n          <p>\n          Work in Progress\n          <span class=\"one\">.</span>\n          <span class=\"two\">.</span>\n          <span class=\"three\">.</span>\n          </p>\n        </header>\n      </section>\n    )\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport './About.scss';\n\nclass About extends Component {\n  render() {\n    return(\n      <section id=\"About\" className=\"\">\n          <h1>About</h1>\n      </section>\n    )\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport './Projects.scss';\n\nclass Projects extends Component {\n  render() {\n    return(\n      <section id=\"Projects\" className=\"\">\n          <h1>Projects</h1>\n      </section>\n    )\n  }\n}\n\nexport default Projects;\n","import React, { Component } from 'react';\nimport './Contact.scss';\n\nclass Contact extends Component {\n  render() {\n    return(\n      <section id=\"Contact\" className=\"\">\n          <h1>Contact</h1>\n      </section>\n    )\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport './App.scss';\n\n// components\n// import Nav from './components/Nav/Nav';\n// import Tracker from './components/Tracker/Tracker';\n// import Mobile from './components/Mobile/Mobile';\n\n// sections\nimport Home from './sections/Home/Home';\nimport About from './sections/About/About';\nimport Projects from './sections/Projects/Projects';\nimport Contact from './sections/Contact/Contact';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        {/* Components */}\n        {/*\n          <Nav />\n          <Tracker />\n          <Mobile />\n          */}\n\n        {/* Sections */}\n        <Home />\n        <About />\n        <Projects />\n        <Contact />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}